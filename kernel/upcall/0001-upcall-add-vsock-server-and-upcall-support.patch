From 638a2ffcabe9152cb7de0c10c0ae3b15c65d0965 Mon Sep 17 00:00:00 2001
From: Chao Wu <chaowu@linux.alibaba.com>
Date: Thu, 12 May 2022 14:13:40 +0800
Subject: [PATCH] upcall: add vsock server and upcall support

This patch introduces vsock server for Dragonball, after the guest
starts, it would initial vsock server and start to establish connection
with the host.

Upcall is a communication channel developed upon vsock. The server
side of the upcall is a driver in guest kernel and it'll start to
serve the requests after the kernel starts. And the client side is
in VMM , it'll be a thread that communicates with vsock through uds.

Through upcall, we could let vmm directly communicate with the guest
kernel and trigger some functions in the guest. In this patch, we have
shown how we accomplish cpu hotplug / hot-unplug, virtio-mmio hotplug/
hot-unplug through upcall without the virtualization of ACPI.

Signed-off-by: Liu Jiang <gerry@linux.alibaba.com>
Signed-off-by: Zizheng Bian <zizheng.bian@linux.alibaba.com>
Signed-off-by: Chao Wu <chaowu@linux.alibaba.com>
Signed-off-by: WangYu <WangYu@linux.alibaba.com>
Signed-off-by: Xingjun Liu <xingjun.liu@linux.alibaba.com>
---
 drivers/misc/dragonball/Kconfig               |   3 +
 drivers/misc/dragonball/Makefile              |   4 +-
 drivers/misc/dragonball/vsock_srv/Kconfig     |  50 ++
 drivers/misc/dragonball/vsock_srv/Makefile    |  14 +
 .../vsock_srv/dragonball_device_manager.c     | 565 ++++++++++++++++++
 .../vsock_srv/dragonball_vsock_srv.c          | 323 ++++++++++
 include/dragonball/device_manager.h           |  23 +
 include/dragonball/vsock_srv.h                |  41 ++
 8 files changed, 1022 insertions(+), 1 deletion(-)
 create mode 100644 drivers/misc/dragonball/vsock_srv/Kconfig
 create mode 100644 drivers/misc/dragonball/vsock_srv/Makefile
 create mode 100644 drivers/misc/dragonball/vsock_srv/dragonball_device_manager.c
 create mode 100644 drivers/misc/dragonball/vsock_srv/dragonball_vsock_srv.c
 create mode 100644 include/dragonball/device_manager.h
 create mode 100644 include/dragonball/vsock_srv.h

diff --git a/drivers/misc/dragonball/Kconfig b/drivers/misc/dragonball/Kconfig
index 458af56452f6..195788a2f21b 100644
--- a/drivers/misc/dragonball/Kconfig
+++ b/drivers/misc/dragonball/Kconfig
@@ -16,3 +16,6 @@ menuconfig DRAGONBALL_DRIVERS
 
 	  If unsure, say N.
 
+if DRAGONBALL_DRIVERS
+source "drivers/misc/dragonball/vsock_srv/Kconfig"
+endif # DRAGONBALL_DRIVERS
diff --git a/drivers/misc/dragonball/Makefile b/drivers/misc/dragonball/Makefile
index 5c4160971cbe..263ba271685f 100644
--- a/drivers/misc/dragonball/Makefile
+++ b/drivers/misc/dragonball/Makefile
@@ -1,4 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0
 #
 # Makefile for Dragonball misc drivers
-#
\ No newline at end of file
+#
+
+obj-$(CONFIG_DRAGONBALL_VSOCK_SRV)	+= vsock_srv/
diff --git a/drivers/misc/dragonball/vsock_srv/Kconfig b/drivers/misc/dragonball/vsock_srv/Kconfig
new file mode 100644
index 000000000000..7a7bd01299c8
--- /dev/null
+++ b/drivers/misc/dragonball/vsock_srv/Kconfig
@@ -0,0 +1,50 @@
+#
+# Alibaba Dragonball Secure Container Runtime Drivers for vsock
+#
+
+config DRAGONBALL_VSOCK_SRV
+	bool "Dragonball in-kernel Virtual Sockets Server"
+	depends on VIRTIO_VSOCKETS
+	default y
+	help
+	  This configure implements an in-kernel vsock server to dispatch Dragonball
+	  requests to registered service handlers, based on the reliable Virtual
+	  Sockets communication channels between guest and host/vmm.
+
+	  If unsure, say N.
+
+config DRAGONBALL_DEVICE_MANAGER
+	bool "Vsock Service to Handle Dragonball Device Management Requests"
+	depends on DRAGONBALL_VSOCK_SRV
+	depends on VIRTIO_VSOCKETS
+	default y
+	help
+	  This configure implements a vsock service to handle Dragonball device
+	  management requests, such as getting device information, hot-plugging
+	  devices etc.
+
+	  If unsure, say N.
+
+config DRAGONBALL_HOTPLUG_VIRTIO_MMIO
+	bool "Virtio-MMIO device hotplug/hotunplug support"
+	depends on DRAGONBALL_DEVICE_MANAGER
+	depends on VIRTIO_MMIO_DRAGONBALL
+	default y
+	help
+	  This configure implements a Virtio-MMIO device hotplug/hotunplug
+	  support, vmm should send hotplug request by vsock which follow
+	  special data structure with command and parameter to hot-pluging
+	  an MMIO device.
+
+	  If unsure, say N.
+
+config DRAGONBALL_HOTPLUG_CPU
+	bool "CPU hotplug/hotunplug support"
+	depends on DRAGONBALL_DEVICE_MANAGER
+	default y
+	help
+	  This configure implements a vCPU hotplug/hotunplug support, vmm
+	  should send hotplug request by vsock which follow special data
+	  structure with command and parameter to hot-pluging an vCPU.
+
+	  If unsure, say N.
diff --git a/drivers/misc/dragonball/vsock_srv/Makefile b/drivers/misc/dragonball/vsock_srv/Makefile
new file mode 100644
index 000000000000..60a3d4492735
--- /dev/null
+++ b/drivers/misc/dragonball/vsock_srv/Makefile
@@ -0,0 +1,14 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# Makefile for the in-kernel vsock server.
+#
+# Copyright (C) 2022 Alibaba Cloud, Inc
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version
+# 2 of the License, or (at your option) any later version.
+#
+
+obj-$(CONFIG_DRAGONBALL_VSOCK_SRV) 	+= dragonball_vsock_srv.o
+obj-$(CONFIG_DRAGONBALL_DEVICE_MANAGER)	+= dragonball_device_manager.o
diff --git a/drivers/misc/dragonball/vsock_srv/dragonball_device_manager.c b/drivers/misc/dragonball/vsock_srv/dragonball_device_manager.c
new file mode 100644
index 000000000000..9bb5e1932103
--- /dev/null
+++ b/drivers/misc/dragonball/vsock_srv/dragonball_device_manager.c
@@ -0,0 +1,565 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * drivers/misc/dragonball/vsock_srv/dragonball_device_manager.c
+ * vsock service for device management.
+ *
+ * Copyright (C) 2022 Alibaba Cloud, Inc
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ */
+
+#define pr_fmt(fmt) "db-dev-mgr: " fmt
+
+#include <linux/kthread.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/virtio_mmio.h>
+#include <linux/cpu.h>
+#include <linux/cpumask.h>
+#include <linux/cpuhotplug.h>
+#include <asm/cpu.h>
+#include <dragonball/vsock_srv.h>
+#include <dragonball/device_manager.h>
+#ifdef CONFIG_ARM64
+#include <linux/irqdomain.h>
+#include <linux/irq.h>
+#endif
+#include <linux/percpu.h>
+#include <linux/device.h>
+#include <asm/numa.h>
+
+/*
+ * Following designs are adopted to simplify implementation:
+ * 1) fix size messages with padding to ease receiving logic.
+ * 2) binary encoding instead of string encoding because it's on the same host.
+ * 3) synchronous communication in ping-pong mode, one in-fly request at most.
+ * 4) do not support module unloading
+ */
+
+/* These definitions are synchronized with dragonball */
+#define DEV_MGR_MSG_SIZE			0x400
+#define DEVMGR_CMD_BYTE			'd'
+#define DEVMGR_MAGIC_VERSION		0x444D0100 /* 'DM' + Version 1.0 */
+
+/* Type of request and reply messages. */
+enum devmgr_msg_type {
+	CONNECT			= 0x00000000,
+	ADD_CPU			= 0x00000001,
+	DEL_CPU			= 0x00000002,
+	ADD_MEM			= 0x00000003,
+	DEL_MEM			= 0x00000004,
+	ADD_MMIO		= 0x00000005,
+	DEL_MMIO		= 0x00000006,
+	ADD_PCI			= 0x00000007,
+	DEL_PCI			= 0x00000008,
+};
+
+struct devmgr_msg_header {
+	/* magic version for identifying upcall */
+	uint32_t	magic_version;
+	/* size of the upcall message */
+	uint32_t	msg_size;
+	/* type for the message to identify its usage */
+	uint32_t	msg_type;
+	/* flag for extra information */
+	uint32_t	msg_flags;
+};
+
+struct devmgr_req {
+	struct devmgr_msg_header msg_header;
+	union {
+		char	pad[DEV_MGR_MSG_SIZE - sizeof(struct devmgr_msg_header)];
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_VIRTIO_MMIO)
+		struct {
+			uint64_t mmio_base;
+			uint64_t mmio_size;
+			uint32_t mmio_irq;
+		} add_mmio_dev;
+#endif
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_CPU)
+		struct {
+			uint8_t count;
+			uint8_t apic_ver;
+			uint8_t apic_ids[256];
+		} cpu_dev_info;
+#endif
+	} msg_load;
+};
+
+struct cpu_dev_reply_info {
+	uint32_t apic_index;
+};
+
+struct devmgr_reply {
+	struct devmgr_msg_header msg_header;
+	/*
+	 * if ret is 0, it means the operation is successful.
+	 * if ret is not 0, return value will be error code.
+	 */
+	int32_t ret;
+	union {
+		char	pad[DEV_MGR_MSG_SIZE - sizeof(struct devmgr_msg_header) - sizeof(int32_t)];
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_VIRTIO_MMIO)
+		struct {
+		} add_mmio_dev;
+#endif
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_CPU)
+	struct cpu_dev_reply_info cpu_dev_info;
+#endif
+	} msg_load;
+};
+
+struct task_res {
+	struct task_struct	*task;
+	struct socket		*sock;
+	struct devmgr_req	req;
+	struct devmgr_reply	reply;
+};
+
+typedef int (*action_route_t) (struct devmgr_req *req,
+			       struct devmgr_reply *rep);
+
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_VIRTIO_MMIO)
+#ifdef CONFIG_ARM64
+static uint32_t get_device_virq(uint32_t pin)
+{
+	uint32_t virq;
+	struct device_node *node;
+	struct irq_fwspec dummy_fwspec = {
+		.param_count = 3,
+		.param = {0, 0, IRQ_TYPE_EDGE_RISING}
+	};
+
+	node = of_find_node_by_name(NULL, "intc");
+	if (!node) {
+		pr_err("interrupt controller device node not found.");
+		return 0;
+	}
+	dummy_fwspec.param[1] = pin;
+	dummy_fwspec.fwnode = of_node_to_fwnode(node);
+	virq = irq_create_fwspec_mapping(&dummy_fwspec);
+	of_node_put(node);
+	return virq;
+}
+#elif defined(CONFIG_X86_64)
+static inline uint32_t get_device_virq(uint32_t irq)
+{
+	return irq;
+}
+#endif
+
+static int get_dev_resource(struct devmgr_req *req, struct resource *res)
+{
+	uint64_t base = req->msg_load.add_mmio_dev.mmio_base;
+	uint64_t size = req->msg_load.add_mmio_dev.mmio_size;
+	uint32_t irq  = req->msg_load.add_mmio_dev.mmio_irq;
+	uint32_t virq;
+
+	if (req->msg_header.msg_size != sizeof(req->msg_load.add_mmio_dev))
+		return -EINVAL;
+
+	res[0].flags = IORESOURCE_MEM;
+	res[0].start = base;
+	res[0].end   = base + size - 1;
+	res[1].flags = IORESOURCE_IRQ;
+	virq = get_device_virq(irq);
+	if (!virq)
+		return -EINVAL;
+	res[1].start = res[1].end = virq;
+
+	return 0;
+}
+#endif
+
+static void _fill_msg_header(struct devmgr_msg_header *msg, uint32_t msg_size,
+			     uint32_t msg_type, uint32_t msg_flags)
+{
+	msg->magic_version = DEVMGR_MAGIC_VERSION;
+	msg->msg_size      = msg_size;
+	msg->msg_type      = msg_type;
+	msg->msg_flags     = msg_flags;
+}
+
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_CPU) && defined(CONFIG_X86_64)
+static int get_cpu_id(int apic_id)
+{
+	int i;
+
+	for (i = 0; i < num_processors; i++) {
+		if (cpu_physical_id(i) == apic_id)
+			return i;
+	}
+	return -1;
+}
+
+/**
+ * Return the first failed hotplug index of the apic_ids to dragonball.
+ * If it is not equal to the count of all hotplug needed vcpus,
+ * we will rollback the vcpus from apics_ids[0] to apic_ids[i-1] in dragonball.
+ */
+static void cpu_event_notification(
+	uint8_t apic_ids_index,
+	int ret,
+	uint32_t action_type,
+	struct devmgr_reply *rep)
+{
+	pr_info("cpu event notification: apic ids index %d", apic_ids_index);
+	rep->msg_load.cpu_dev_info.apic_index = apic_ids_index;
+	rep->ret = ret;
+	_fill_msg_header(&rep->msg_header,
+	sizeof(struct cpu_dev_reply_info), action_type, 0);
+}
+#endif
+
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_VIRTIO_MMIO)
+static int add_mmio_dev(struct devmgr_req *req,
+			struct devmgr_reply *rep)
+{
+	int ret;
+	struct resource res[2] = {};
+	struct devmgr_msg_header *rep_mh = &rep->msg_header;
+
+	ret = get_dev_resource(req, res);
+	if (ret)
+		return ret;
+
+	ret = virtio_mmio_add_device(res, ARRAY_SIZE(res));
+	if (!ret) {
+		rep->ret = ret;
+		_fill_msg_header(rep_mh, 0, ADD_MMIO, 0);
+	}
+	return ret;
+}
+
+static int del_mmio_dev(struct devmgr_req *req,
+			struct devmgr_reply *rep)
+{
+	int ret;
+	struct resource res[2] = {};
+	struct devmgr_msg_header *rep_mh = &rep->msg_header;
+
+	ret = get_dev_resource(req, res);
+	if (ret)
+		return ret;
+
+	ret = virtio_mmio_del_device(res, ARRAY_SIZE(res));
+	if (!ret) {
+		rep->ret = ret;
+		_fill_msg_header(rep_mh, 0, DEL_MMIO, 0);
+	}
+	return ret;
+}
+#endif
+
+
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_CPU) && defined(CONFIG_X86_64)
+static int add_cpu(int apic_id, uint8_t apic_ver)
+{
+	int cpu_id, node_id;
+	int ret;
+	struct device *cpu_dev;
+
+	pr_info("adding vcpu apic_id %d", apic_id);
+
+	/**
+	 * Get the mutex lock for hotplug and cpu update and cpu write lock.
+	 * So that other threads won't influence the hotplug process.
+	 */
+	lock_device_hotplug();
+	cpu_maps_update_begin();
+	cpu_hotplug_begin();
+
+	cpu_id = generic_processor_info(apic_id, apic_ver);
+	if (cpu_id < 0) {
+		pr_err("cpu (apic id %d) cannot be added, generic processor info failed", apic_id);
+		ret = -EINVAL;
+		goto rollback_generic_cpu;
+	}
+
+	/* update numa mapping for hot-plugged cpus. */
+	node_id = numa_cpu_node(cpu_id);
+	if (node_id != NUMA_NO_NODE)
+		numa_set_node(cpu_id, node_id);
+
+	ret = arch_register_cpu(cpu_id);
+	if (ret) {
+		pr_err("cpu %d cannot be added, register cpu failed %d", cpu_id, ret);
+		goto rollback_register_cpu;
+	}
+
+	cpu_hotplug_done();
+	cpu_maps_update_done();
+	unlock_device_hotplug();
+
+	ret = cpu_up(cpu_id);
+	if (ret) {
+		pr_err("cpu %d cannot be added, cpu up failed: %d", cpu_id, ret);
+		goto rollback_cpu_up;
+	}
+	cpu_dev = get_cpu_device(cpu_id);
+	if (cpu_dev)
+		cpu_dev->offline = false;
+	return ret;
+
+rollback_cpu_up:
+	arch_unregister_cpu(cpu_id);
+	set_cpu_present(cpu_id, false);
+	per_cpu(x86_cpu_to_apicid, cpu_id) = -1;
+	num_processors--;
+	return ret;
+
+rollback_register_cpu:
+	set_cpu_present(cpu_id, false);
+	per_cpu(x86_cpu_to_apicid, cpu_id) = -1;
+	num_processors--;
+rollback_generic_cpu:
+	cpu_hotplug_done();
+	cpu_maps_update_done();
+	unlock_device_hotplug();
+	return ret;
+}
+
+static int del_cpu(int apic_id)
+{
+	int cpu_id = get_cpu_id(apic_id);
+	int ret;
+
+	if (cpu_id == 0) {
+		pr_err("cannot del bootstrap processor.");
+		return -EINVAL;
+	}
+	pr_info("deleting vcpu %d", cpu_id);
+	ret = cpu_down(cpu_id);
+	if (ret) {
+		pr_err("del vcpu failed, err: %d", ret);
+		return ret;
+	}
+
+	lock_device_hotplug();
+	cpu_maps_update_begin();
+	cpu_hotplug_begin();
+
+	arch_unregister_cpu(cpu_id);
+	set_cpu_present(cpu_id, false);
+	per_cpu(x86_cpu_to_apicid, cpu_id) = -1;
+	num_processors--;
+
+	cpu_hotplug_done();
+	cpu_maps_update_done();
+	unlock_device_hotplug();
+
+	return ret;
+}
+
+static int add_cpu_dev(struct devmgr_req *req,
+			struct devmgr_reply *rep)
+{
+	int ret;
+	uint8_t i;
+	int apic_id;
+
+	uint8_t count = req->msg_load.cpu_dev_info.count;
+	uint8_t apic_ver = req->msg_load.cpu_dev_info.apic_ver;
+	uint8_t *apic_ids = req->msg_load.cpu_dev_info.apic_ids;
+
+	pr_info("add vcpu number: %d", count);
+
+	for (i = 0; i < count; ++i) {
+		apic_id = apic_ids[i];
+		if (get_cpu_id(apic_id) != -1) {
+			pr_err("cpu cannot be added: apci_id %d is already been used.", apic_id);
+			ret = -EINVAL;
+			return ret;
+		}
+	}
+
+	for (i = 0; i < count; ++i) {
+		apic_id = apic_ids[i];
+		ret = add_cpu(apic_id, apic_ver);
+		if (ret != 0)
+			break;
+	}
+
+	if (!ret)
+		cpu_event_notification(i, ret, ADD_CPU, rep);
+	return ret;
+}
+
+static int del_cpu_dev(struct devmgr_req *req,
+			struct devmgr_reply *rep)
+{
+	int ret;
+	uint8_t i;
+	int cpu_id;
+
+	uint8_t count = req->msg_load.cpu_dev_info.count;
+	uint8_t *apic_ids = req->msg_load.cpu_dev_info.apic_ids;
+
+	pr_info("del vcpu number : %d", count);
+
+	if (count >= num_processors) {
+		pr_err("cpu del parameter check error: cannot remove all vcpus");
+		ret = -EINVAL;
+		cpu_event_notification(0, ret, DEL_CPU, rep);
+		return ret;
+	}
+
+	for (i = 0; i < count; ++i) {
+		cpu_id = get_cpu_id(apic_ids[i]);
+		if (!cpu_possible(cpu_id)) {
+			pr_err("cpu %d cannot be deleted: cpu not possible", cpu_id);
+			ret = -EINVAL;
+			cpu_event_notification(0, ret, DEL_CPU, rep);
+			return ret;
+		}
+	}
+
+	for (i = 0; i < count; ++i) {
+		ret = del_cpu(apic_ids[i]);
+		if (ret != 0)
+			break;
+	}
+
+	if (!ret)
+		cpu_event_notification(i, ret, DEL_CPU, rep);
+	return ret;
+}
+#endif
+
+static struct {
+	enum devmgr_msg_type cmd;
+	action_route_t fn;
+} opt_map[] = {
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_VIRTIO_MMIO)
+	{ADD_MMIO, add_mmio_dev},
+	{DEL_MMIO, del_mmio_dev},
+#endif
+#if defined(CONFIG_DRAGONBALL_HOTPLUG_CPU) && defined(CONFIG_X86_64)
+	{ADD_CPU, add_cpu_dev},
+	{DEL_CPU, del_cpu_dev},
+#endif
+};
+
+static action_route_t get_action(struct devmgr_req *req)
+{
+	int i;
+	action_route_t action = NULL;
+	int size_opt = ARRAY_SIZE(opt_map);
+
+	for (i = 0; i < size_opt; i++) {
+		if (opt_map[i].cmd == req->msg_header.msg_type) {
+			action = opt_map[i].fn;
+			break;
+		}
+	}
+	return action;
+}
+
+static void db_devmgr_process(struct devmgr_req *req,
+			      struct devmgr_reply *rep)
+{
+	int err;
+	action_route_t action;
+	struct devmgr_msg_header *req_mh = &req->msg_header;
+	struct devmgr_msg_header *rep_mh = &rep->msg_header;
+
+	if (req_mh->magic_version != DEVMGR_MAGIC_VERSION) {
+		_fill_msg_header(rep_mh, 0, req->msg_header.msg_type, 0);
+		return;
+	}
+
+	action = get_action(req);
+	if (action == NULL) {
+		pr_err("db_devmgr_process : Not found valid command");
+		rep->ret = -1;
+		_fill_msg_header(rep_mh, 0, req->msg_header.msg_type, 0);
+		return;
+	}
+
+	err = action(req, rep);
+	if (err) {
+		pr_err("db_devmgr_process : Command run failed, err: %d", err);
+		rep->ret = err;
+		_fill_msg_header(rep_mh, 0, req->msg_header.msg_type, 0);
+		return;
+	}
+}
+
+static int db_devmgr_server(void *data)
+{
+	struct task_res *res = (struct task_res *)data;
+	struct devmgr_msg_header *rep_mh = &res->reply.msg_header;
+	int len;
+
+	_fill_msg_header(rep_mh, 0, CONNECT, 0);
+	len = db_vsock_sendmsg(res->sock, (char *)&res->reply, DEV_MGR_MSG_SIZE);
+	if (len <= 0) {
+		pr_err("db_devmgr_server : Server send message failed, err: %d", len);
+		sock_release(res->sock);
+		kfree(res);
+		return len;
+	}
+
+	while (!kthread_should_stop()) {
+		len = db_vsock_recvmsg(res->sock, (char *)&res->req,
+				       DEV_MGR_MSG_SIZE, 0);
+		if (len <= 0)
+			break;
+
+		/* The result(OK or Error) will fill into res->reply field */
+		db_devmgr_process(&res->req, &res->reply);
+
+		len = db_vsock_sendmsg(res->sock, (char *)&res->reply,
+				       DEV_MGR_MSG_SIZE);
+		if (len <= 0)
+			break;
+	}
+
+	/* TODO: check who shutdown the socket, receiving or sending. */
+	sock_release(res->sock);
+	kfree(res);
+	return 0;
+}
+
+static int db_devmgr_handler(struct socket *sock)
+{
+	struct task_res *res;
+	struct task_struct *conn_task;
+
+	/* TODO: ensure singleton, only one server exists */
+	res = kzalloc(sizeof(*res), GFP_KERNEL);
+	if (!res)
+		return -ENOMEM;
+
+	res->sock = sock;
+	conn_task = kthread_create(db_devmgr_server, res, "db_dev_mgr");
+	if (IS_ERR(conn_task)) {
+		pr_err("db_devmgr_handler : Client process thread create failed, err: %d",
+		       (int)PTR_ERR(conn_task));
+		goto failed;
+	} else {
+		res->task = conn_task;
+		wake_up_process(conn_task);
+	}
+
+	return 0;
+failed:
+	kfree(res);
+	return PTR_ERR(conn_task);
+}
+
+static int __init db_device_manager_init(void)
+{
+	return register_db_vsock_service(DEVMGR_CMD_BYTE, db_devmgr_handler);
+}
+
+late_initcall(db_device_manager_init);
+
+MODULE_AUTHOR("Alibaba, Inc.");
+MODULE_DESCRIPTION("Dragonball Device Manager");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/misc/dragonball/vsock_srv/dragonball_vsock_srv.c b/drivers/misc/dragonball/vsock_srv/dragonball_vsock_srv.c
new file mode 100644
index 000000000000..684e8cc1b6c7
--- /dev/null
+++ b/drivers/misc/dragonball/vsock_srv/dragonball_vsock_srv.c
@@ -0,0 +1,323 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * drivers/misc/dragonball/vsock_srv/dragonball_vsock_srv.c
+ * Dragonball vsock server
+ *
+ * Copyright (C) 2022 Alibaba Cloud, Inc
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ */
+
+#define pr_fmt(fmt) "db-vsock-srv: " fmt
+
+#include <linux/kthread.h>
+#include <linux/list.h>
+#include <linux/module.h>
+#include <linux/net.h>
+#include <linux/vm_sockets.h>
+#include <net/net_namespace.h>
+#include <net/sock.h>
+#include <dragonball/vsock_srv.h>
+
+struct db_conn_info {
+	struct work_struct work;
+	struct socket *sock;
+};
+
+struct db_service_entry {
+	char			cmd;
+	db_vsock_svc_handler_t	handler;
+	struct list_head	list;
+};
+
+/* Protects registered command. */
+static DEFINE_RWLOCK(db_service_lock);
+static LIST_HEAD(db_service_list);
+
+static struct task_struct *db_service_task;
+static unsigned int db_server_port = DB_SERVER_PORT;
+
+struct socket *db_create_vsock_listener(unsigned int port)
+{
+	struct socket *sock;
+	int ret = 0;
+
+	union {
+		struct sockaddr sa;
+		struct sockaddr_vm svm;
+	} addr = {
+		.svm = {
+			.svm_family = AF_VSOCK,
+			.svm_port = port,
+			.svm_cid = VMADDR_CID_ANY,
+		}
+	};
+
+	ret = sock_create_kern(&init_net, AF_VSOCK, SOCK_STREAM, 0, &sock);
+	if (ret) {
+		pr_err("Server vsock create failed, err: %d\n", ret);
+		return ERR_PTR(ret);
+	}
+
+	ret = sock->ops->bind(sock, &addr.sa, sizeof(addr.svm));
+	if (ret) {
+		pr_err("Server vsock bind failed, err: %d\n", ret);
+		goto err;
+	}
+	ret = sock->ops->listen(sock, 10);
+	if (ret < 0) {
+		pr_err("Server vsock listen error: %d\n", ret);
+		goto err;
+	}
+
+	return sock;
+err:
+	sock_release(sock);
+	return ERR_PTR(ret);
+}
+EXPORT_SYMBOL_GPL(db_create_vsock_listener);
+
+int db_vsock_sendmsg(struct socket *sock, char *buf, size_t len)
+{
+	struct kvec vec;
+	struct msghdr msgh;
+
+	vec.iov_base = buf;
+	vec.iov_len  = len;
+	memset(&msgh, 0, sizeof(msgh));
+
+	return kernel_sendmsg(sock, &msgh, &vec, 1, len);
+}
+EXPORT_SYMBOL_GPL(db_vsock_sendmsg);
+
+int db_vsock_recvmsg(struct socket *sock, char *buf, size_t len, int flags)
+{
+	struct kvec vec;
+	struct msghdr msgh;
+
+	memset(&vec, 0, sizeof(vec));
+	memset(&msgh, 0, sizeof(msgh));
+	vec.iov_base = buf;
+	vec.iov_len = len;
+
+	return kernel_recvmsg(sock, &msgh, &vec, 1, len, flags);
+}
+EXPORT_SYMBOL_GPL(db_vsock_recvmsg);
+
+static int db_vsock_recvcmd(struct socket *cli_socket, char *cmd)
+{
+	int ret;
+	char rcv;
+	long timeout;
+	struct kvec vec;
+	struct msghdr msg;
+
+	memset(&vec, 0, sizeof(vec));
+	memset(&msg, 0, sizeof(msg));
+	vec.iov_base = &rcv;
+	vec.iov_len = 1;
+
+	timeout = cli_socket->sk->sk_rcvtimeo;
+	cli_socket->sk->sk_rcvtimeo = DB_INIT_TIMEOUT * HZ;
+	ret = kernel_recvmsg(cli_socket, &msg, &vec, 1, 1, 0);
+	cli_socket->sk->sk_rcvtimeo = timeout;
+	*cmd = rcv;
+
+	return ret;
+}
+
+/*
+ * The workqueue handler for vsock work_struct.
+ *
+ * Each worker-pool bound to an actual CPU implements concurrency management
+ * by hooking into the scheduler. The worker-pool is notified whenever an
+ * active worker wakes up or sleeps and keeps track of the number of the
+ * currently runnable workers. Generally, work items are not expected to hog
+ * a CPU and consume many cycles. That means maintaining just enough concurrency
+ * to prevent work processing from stalling should be optimal.
+ *
+ * So it's OK to sleep in a workqueue handler, it won't cause too many worker
+ * threads.
+ */
+static void db_conn_service(struct work_struct *work)
+{
+	struct db_conn_info *conn_info =
+		container_of(work, struct db_conn_info, work);
+	struct db_service_entry *service_entry;
+	int len, ret = -1;
+	char cmd;
+
+	len = db_vsock_recvcmd(conn_info->sock, &cmd);
+	if (len <= 0)
+		goto recv_failed;
+
+	read_lock(&db_service_lock);
+	list_for_each_entry(service_entry, &db_service_list, list) {
+		if (cmd == service_entry->cmd) {
+			ret = service_entry->handler(conn_info->sock);
+			break;
+		}
+	}
+	read_unlock(&db_service_lock);
+
+recv_failed:
+	if (ret) {
+		sock_release(conn_info->sock);
+		pr_info("Client connection closed, error code: %d\n", ret);
+	}
+	kfree(conn_info);
+}
+
+static int db_create_cli_conn(struct socket *sock)
+{
+	struct db_conn_info *conn;
+
+	conn = kmalloc(sizeof(*conn), GFP_KERNEL);
+	if (!conn)
+		return -ENOMEM;
+
+	conn->sock = sock;
+	INIT_WORK(&conn->work, db_conn_service);
+	schedule_work(&conn->work);
+
+	return 0;
+}
+
+static int db_vsock_server(void *data)
+{
+	struct socket *sock;
+	int err;
+
+	sock = db_create_vsock_listener(db_server_port);
+	if (IS_ERR(sock)) {
+		err = PTR_ERR(sock);
+		pr_err("Init server err: %d\n", err);
+		return err;
+	}
+
+	while (!kthread_should_stop()) {
+		struct socket *conn;
+
+		conn = sock_alloc();
+		if (!conn)
+			return -ENOMEM;
+
+		conn->type = sock->type;
+		conn->ops  = sock->ops;
+
+		/* 0:propotal 1:kernel */
+		err = sock->ops->accept(sock, conn, 0, 1);
+		if (err < 0) {
+			pr_err("Server accept err: %d\n", err);
+			sock_release(conn);
+			continue;
+		}
+
+		err = db_create_cli_conn(conn);
+		if (err)
+			pr_err("Create client connetion err: %d\n", err);
+	}
+
+	return 0;
+}
+
+static int db_create_service(void)
+{
+	struct task_struct *service;
+	int rc = 0;
+
+	service = kthread_create(db_vsock_server, NULL, "db-vsock-srv");
+	if (IS_ERR(service)) {
+		rc = PTR_ERR(service);
+		pr_err("Server task create failed, err: %d\n", rc);
+	} else {
+		db_service_task = service;
+		wake_up_process(service);
+	}
+	return rc;
+}
+
+static int db_vsock_srv_cmdline_set(const char *device,
+				    const struct kernel_param *kp)
+{
+	unsigned int port = 0;
+	int processed, consumed = 0;
+
+	/* Get "@<port>" */
+	processed = sscanf(device, "@%u%n", &port, &consumed);
+	if (processed < 1 || device[consumed] || port == 0 || port > 1024) {
+		pr_err("Using @<port> format and port range (0, 1024].\n");
+		return -EINVAL;
+	}
+
+	db_server_port = port;
+	return 0;
+}
+
+static const struct kernel_param_ops db_vsock_srv_cmdline_param_ops = {
+	.set = db_vsock_srv_cmdline_set,
+};
+
+device_param_cb(port, &db_vsock_srv_cmdline_param_ops, NULL, 0400);
+
+int register_db_vsock_service(const char cmd, db_vsock_svc_handler_t handler)
+{
+	int rc = -EEXIST;
+	struct db_service_entry *service_entry;
+
+	write_lock(&db_service_lock);
+	list_for_each_entry(service_entry, &db_service_list, list) {
+		if (cmd == service_entry->cmd) {
+			rc = -EEXIST;
+			goto out;
+		}
+	}
+
+	service_entry = kzalloc(sizeof(*service_entry), GFP_KERNEL);
+	if (!service_entry) {
+		rc = -ENOMEM;
+		goto out;
+	}
+	service_entry->cmd = cmd;
+	service_entry->handler = handler;
+	list_add_tail(&service_entry->list, &db_service_list);
+	rc = 0;
+out:
+	write_unlock(&db_service_lock);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(register_db_vsock_service);
+
+int unregister_db_vsock_service(const char cmd)
+{
+	int rc = -EEXIST;
+	struct db_service_entry *service_entry, *n;
+
+	write_lock(&db_service_lock);
+	list_for_each_entry_safe(service_entry, n, &db_service_list, list) {
+		if (cmd == service_entry->cmd) {
+			list_del(&service_entry->list);
+			rc = 0;
+			break;
+		}
+	}
+	write_unlock(&db_service_lock);
+
+	return rc;
+}
+EXPORT_SYMBOL_GPL(unregister_db_vsock_service);
+
+static int __init db_vsock_srv_init(void)
+{
+	return db_create_service();
+}
+
+late_initcall(db_vsock_srv_init);
+
+MODULE_AUTHOR("Alibaba, Inc.");
+MODULE_DESCRIPTION("Dragonball vsock server");
+MODULE_LICENSE("GPL v2");
diff --git a/include/dragonball/device_manager.h b/include/dragonball/device_manager.h
new file mode 100644
index 000000000000..84b830c87531
--- /dev/null
+++ b/include/dragonball/device_manager.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * device_manager.h  Device Manager for Dragonball
+ *
+ * Copyright (C) 2022 Alibaba Cloud, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#ifndef _DB_DEVICE_MANAGER_H
+#define _DB_DEVICE_MANAGER_H
+
+#include <linux/device.h>
+
+#if defined(CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES)
+int virtio_mmio_add_device(struct resource *resources, size_t res_size);
+int virtio_mmio_del_device(struct resource *resources, size_t res_size);
+#endif
+
+#endif /* _DB_DEVICE_MANAGER_H */
diff --git a/include/dragonball/vsock_srv.h b/include/dragonball/vsock_srv.h
new file mode 100644
index 000000000000..cb6c120aa5f9
--- /dev/null
+++ b/include/dragonball/vsock_srv.h
@@ -0,0 +1,41 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * db_vsock_srv.h  Virtual Sockets Server for Dragonball
+ *
+ * Copyright (C) 2022 Alibaba Cloud, Inc
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the Free
+ * Software Foundation; either version 2 of the License, or (at your option)
+ * any later version.
+ */
+
+#ifndef _DB_VSOCK_SRV_H
+#define _DB_VSOCK_SRV_H
+
+#include <linux/workqueue.h>
+#include <linux/net.h>
+
+/* Vsock port to listen for incoming connections. */
+#define DB_SERVER_PORT				0xDB
+#define DB_RECVBUF_SIZE			0x400
+#define DB_INIT_TIMEOUT			10
+
+/*
+ * Vsock service handler to handle new incoming connections.
+ *
+ * Return:
+ * 0: on success and the callback takes ownership of the sock.
+ * !0: on failure and the callback should keep the sock as is.
+ */
+typedef int (*db_vsock_svc_handler_t) (struct socket *sock);
+
+extern int register_db_vsock_service(const char cmd,
+				     db_vsock_svc_handler_t handler);
+extern int unregister_db_vsock_service(const char cmd);
+
+extern struct socket *db_create_vsock_listener(unsigned int port);
+extern int db_vsock_sendmsg(struct socket *sock, char *buf, size_t len);
+extern int db_vsock_recvmsg(struct socket *sock, char *buf, size_t len,
+			    int flags);
+
+#endif /* _DB_VSOCK_SRV_H */
-- 
2.19.1.6.gb485710b

