diff --git a/src/api/pseudo_fs.rs b/src/api/pseudo_fs.rs
index 637c819..35609ae 100644
--- a/src/api/pseudo_fs.rs
+++ b/src/api/pseudo_fs.rs
@@ -107,7 +107,7 @@ impl PseudoFs {
         let mut inode = &self.root_inode;
 
         'outer: for component in path.components() {
-            debug!("pseudo fs mount iterate {:?}", component.as_os_str());
+            trace!("pseudo fs mount iterate {:?}", component.as_os_str());
             match component {
                 Component::RootDir => continue,
                 Component::CurDir => continue,
diff --git a/src/transport/fusedev/linux_session.rs b/src/transport/fusedev/linux_session.rs
index c3e30d9..7287031 100644
--- a/src/transport/fusedev/linux_session.rs
+++ b/src/transport/fusedev/linux_session.rs
@@ -232,21 +232,15 @@ impl FuseChannel {
             let mut fusereq_available = false;
             match self.poll.poll(&mut events, None) {
                 Ok(_) => {}
-                Err(ref e) if e.kind() == std::io::ErrorKind::Interrupted => {
-                    continue;
-                }
+                Err(ref e) if e.kind() == std::io::ErrorKind::Interrupted => continue,
                 Err(e) => return Err(SessionFailure(format!("epoll wait: {}", e))),
             }
 
             for event in events.iter() {
                 if event.is_readable() {
                     match event.token() {
-                        EXIT_FUSE_EVENT => {
-                            need_exit = true;
-                        }
-                        FUSE_DEV_EVENT => {
-                            fusereq_available = true;
-                        }
+                        EXIT_FUSE_EVENT => need_exit = true,
+                        FUSE_DEV_EVENT => fusereq_available = true,
                         x => {
                             error!("unexpected epoll event");
                             return Err(SessionFailure(format!("unexpected epoll event: {}", x.0)));
@@ -288,9 +282,12 @@ impl FuseChannel {
                     }
                     Err(e) => match e {
                         Errno::ENOENT => {
-                            // ENOENT means the operation was interrupted, it's safe
-                            // to restart
-                            trace!("restart reading");
+                            // ENOENT means the operation was interrupted, it's safe to restart
+                            trace!("restart reading due to ENOENT");
+                            continue;
+                        }
+                        Errno::EAGAIN => {
+                            trace!("restart reading due to EAGAIN");
                             continue;
                         }
                         Errno::EINTR => {
